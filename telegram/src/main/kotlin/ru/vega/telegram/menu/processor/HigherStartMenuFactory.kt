package ru.vega.telegram.menu.processor

import dev.inmo.tgbotapi.utils.matrix
import dev.inmo.tgbotapi.utils.row
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty
import org.springframework.stereotype.Component
import ru.vega.telegram.configuration.ExternalResourcesProperties
import ru.vega.telegram.menu.Button
import ru.vega.telegram.model.Menu

@Component
@ConditionalOnProperty(prefix = "telegram.bot", name= ["start-menu"], havingValue = "HIGH")
class HigherStartMenuFactory(
    private val disciplineDetailsSelectMenuFactory: DisciplineDetailsSelectMenuFactory,
    private val questionSelectMenuFactory: QuestionSelectionMenuFactory,
    private val specialitiesDisciplinesSelectMenuFactory: SpecialitiesDisciplinesSelectMenuFactory,
    private val tutorMeetingTypeSelectMenuFactory: TutorMeetingTypeSelectMenuFactory,
    private val universitiesTownSelectMenuFactory: UniversitiesTownSelectMenuFactory,
    private val universitySpecialityBookmarksMenuFactory: UniversitySpecialitiesBookmarksMenuFactory,
    private val contactsMenuFactory: ContentsMenuFactory,
    private val servicesMenuFactory: ServicesMenuFactory,
    private val externalResourcesProperties: ExternalResourcesProperties
) : StartMenuFactory {

    override fun create(): Menu {
        val buttons = matrix<Button> {
            row(
                Button("–ü—Ä–µ–¥–º–µ—Ç—ã", "disciplines") { session ->
                    session.menuHistory.pushNextMenu(disciplineDetailsSelectMenuFactory.create())
                },

                Button("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "specialities") { session ->
                    session.menuHistory.pushNextMenu(specialitiesDisciplinesSelectMenuFactory.create(session.speciality.selectedDisciplines))
                }
            )

            row(
                Button("–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã", "tutors") { session ->
                    session.menuHistory.pushNextMenu(tutorMeetingTypeSelectMenuFactory.create())
                }
            )

            row(
                Button("FAQ", "faq") { session ->
                    session.menuHistory.pushNextMenu(questionSelectMenuFactory.create(0))
                },

                Button("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã", "universities") { session ->
                    session.menuHistory.pushNextMenu(universitiesTownSelectMenuFactory.create(0))
                }
            )

            row(
                Button("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts") { session ->
                    session.menuHistory.pushNextMenu(contactsMenuFactory.create())
                },

                Button("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "bookmarks") { session ->
                    val menu = universitySpecialityBookmarksMenuFactory.create(session.user.id)
                    session.menuHistory.pushNextMenu(menu)
                }
            )

            row(Button("–ï—Å–ª–∏ —Ç—ã –ø–æ—Å—Ç—É–ø–∞–µ—à—å –≤ –°–°–£–ó", "spo", url = externalResourcesProperties.spoBotUrl) {})

            row(Button("–ù–∞—à–∏ —É—Å–ª—É–≥–∏", "services") { session ->
                val menu = servicesMenuFactory.create(externalResourcesProperties.serviceContact)
                session.menuHistory.pushNextMenu(menu)
            })
        }

        val message =
            """
                –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ú–µ–Ω—è –∑–æ–≤—É—Ç Vega üí´
                –Ø —Ö–æ—á—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –≤—ã–±–æ—Ä–µ —Ç–≤–æ–µ–π –±—É–¥—É—â–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –í–£–ó–∞! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?
            """.trimIndent()

        return Menu(buttons, message)
    }
}